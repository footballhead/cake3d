# CS 488 Final Project

Made by Michael Hitchens

A small arcade FPS called "Get Away From My Cake!". The story is as follows:

    It's your birthday and you baked a lovely cake. It smells so good that
    aliens from outer space have invited themselves over to steal it! You, armed
    with your super effective paint ball gun, must protect your cake at all
    costs! Retreating into your basement, you prepare for a final standoff...

## Compilation

Since I usee external libraries that don't integrate well with CMake,
compilation takes two steps:

### Step 1: Compiling SDL

Run `sh compile_sdl.sh`. This will compile SDL2 and SDL2_mixer then drop them in
your home directory. Step 2 will look for these and complain if they aren't
there. You should only have to do this once.

### Step 2: Compile the game

The rest uses CMake, which works as you would expect CMake to work:

```
mkdir build
cd build
cmake ..
make -j8
```

## Running

You must run from the project directory root! Otherwise the game will complain
about finding assets. The built binary called `cs488project` can be found in
`build/src` and can be run as follows:

```
./build/src/cs488project
```

## Controls

Menus are navigated with the mouse. The gameplay consists of moving the mouse to
look around; holding the left mouse button to shoot; and using the W, A, S, and
D keys to navigate the space.

## Misc

I did not implement shadow mapping or BSP trees. I implemented everything else.

## Credits

The Lift Kevin MacLeod (incompetech.com)
Licensed under Creative Commons: By Attribution 3.0 License
http://creativecommons.org/licenses/by/3.0/

All sounds generated by http://www.bfxr.net/

All textures were made by Michael Hitchens in Gimp.

All models were made by Michael Hitchens in Blender.

The following libraries were used:

  * SDL2 -- A better GLFW (zlib license)
  * SDL2_mixer -- SDL2 addon for playing sound (zlib license)
  * glm -- For 3D math (Modified MIT)
  * gl3w -- For OpenGL 3.3 functionality (public domain)
  * dear imgui -- For UI (MIT license)

## Objectives

 1. Modelled scene in the form of a playable level
 2. User interface for starting game and changing graphics options
 3. Sychronized sound with player actions
 4. Keyframe animation with linear interpolation
 5. Texture mapping of scene geometry using external textures
 6. Normal mapping of scene geometry using external textures
 7. Particle system for impact effects and intersting scene features
 8. Dynamic shadows using shadow mapping [NOT ATTEMPTED]
 9. Binary space partitioning tree generation [NOT ATTEMPTED]
10. Binary space partitioning tree traversal [NOT ATTEMPTED]
